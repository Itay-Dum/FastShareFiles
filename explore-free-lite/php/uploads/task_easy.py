import math
import matplotlib.pyplot as plt
import random

EPSILON = 0.1
dataset = [(14.737404394641691, 15.087395263061326), (12.097777976143007, 11.613454377562958), (14.3856116861565, 12.567934879476184), (15.006810026857837, 13.683093822163539), (12.77077285093545, 16.48949765889571), (11.288903266697629, 14.286994039253663), (13.570144289175413, 14.136558071349828), (11.035244754261983, 12.003068385250437), (15.207340100863595, 14.44177078481081), (11.526919995129656, 16.613196752122114), (14.486292731099644, 12.673643708236261), (15.303777191859012, 10.744256707414435), (12.336243916532242, 13.130163501673358), (13.948387533987237, 11.364820805270071), (12.514135418614355, 11.008945006635813), (11.917092457794894, 15.38402090993246), (14.594673037048443, 11.923285679308032), (16.11272356786384, 11.297996121316283), (14.789651492193986, 14.03688748690582), (16.443683930498466, 15.461029126394408), (15.322690062177879, 12.674876711585915), (13.453999646910402, 16.01446084123143), (16.599949543379996, 11.115512730665428), (14.067491221630739, 11.56696913680874), (12.610757614972204, 13.19176406575011), (16.907412214502685, 15.283002074175023), (16.77441776173478, 15.928290135031425), (16.070439901886118, 13.06897979010052), (15.306620696360111, 12.113137413239215), (16.031347764449688, 12.712589158331621), (14.486364899681154, 13.061216713845239), (15.689190485494384, 10.047822977465398), (14.675135332803556, 11.310892181023608), (14.43604030726779, 14.852089207559244), (13.461253196272185, 11.494625080028994), (15.263976560598621, 13.589651495396268), (12.843933524605523, 13.074875987757647), (12.688354815004875, 16.85478859183494), (14.136611099410986, 13.749187159440146), (13.711766509226281, 11.624274020546814), (26.28327797488026, 16.614274116449014), (25.819041554028132, 13.702784459568054), (28.577230371256793, 14.481164024758431), (27.80750506076811, 16.50320730248508), (26.83994317345595, 13.685039466931396), (26.230111785029255, 14.905761713191808), (25.0857306375983, 16.868482547502577), (29.64365433728409, 15.90322977376545), (26.43308208587486, 11.491070778990801), (27.500808962977214, 16.215946757300348), (26.140033570782762, 12.50314427419507), (29.36756883127868, 12.638783921053069), (29.718620303814244, 11.668731835492547), (25.408030470182887, 10.121571485055116), (26.421351698084454, 11.655595556667961), (25.095522303793974, 10.989877559803743), (26.83267743756208, 13.458673049975749), (26.712086745425353, 12.850854005327319), (27.59392760843911, 12.394150360578621), (26.252378930642017, 15.455870226432378), (28.44387519296523, 15.480892955094916), (26.165137472600684, 14.84559936393144), (26.601319580749184, 16.15563382678705), (27.30881051588774, 14.365913556224463), (29.735028503982, 12.675132503772835), (28.989539345463406, 12.814120634498469), (26.12988372186604, 14.518803628645443), (27.469466754429725, 15.33142749187687), (26.463058933385568, 11.127859710358491), (25.0564116317863, 12.17003513318592), (28.042854345347546, 10.048240433033284), (28.6991053492928, 14.57881654100574), (27.714005985810285, 12.353255807797542), (28.573665446488494, 13.571473280833557), (26.581624638255615, 11.265228818293501), (27.74113996902829, 10.732528809545492), (29.045463850618475, 11.429685517012583), (28.95982608604346, 13.392849791510987), (27.342614163915222, 14.161412999725375), (27.335129353445048, 15.088581476918833), (16.777215238527322, 25.59694919418018), (14.356439656041811, 26.15075444265074), (15.176465143057705, 26.75052973479189), (16.453958873980923, 25.559693595779795), (11.98953102186319, 25.91990808654968), (12.450032642097392, 26.562197601127842), (14.727474191734164, 28.55761117145529), (14.72091417475535, 25.90256212948543), (16.450157409934466, 28.963170724449213), (12.060059094386999, 27.456522096221455), (14.288899587405254, 27.783635246660666), (10.049286599895616, 27.10975065772131), (13.90344483186778, 25.71564151846276), (15.509731128494087, 25.726684405882057), (15.857397350790055, 28.90941636854422), (14.195859312738886, 29.065451209482017), (16.993800698264273, 27.118040666173133), (10.606257381076373, 27.527122175507493), (14.270548224967364, 26.725864469832786), (13.629737681828086, 28.668980122978727), (16.329866075758765, 25.532885238478638), (15.84191632094129, 29.3880829047056), (12.318493568582024, 28.537508179401726), (15.712048307222485, 26.30257844494531), (15.566786138396221, 27.080937364435826), (10.391192291319678, 29.58050017772368), (10.580574074649608, 29.66940361323665), (12.123248703936103, 26.65862325411388), (12.196905820834283, 29.214737185385964), (14.195898537893967, 27.16559414325368), (15.812766061325467, 27.772043969911575), (14.670467291345606, 27.450761643451372), (12.431287705920177, 27.860453232884687), (10.727561290637027, 29.138398654058747), (13.70176454422899, 27.6917987019458), (10.915679439523167, 28.333321122032544), (11.807562369829839, 28.792036336085474), (10.555965232846388, 27.445943924576042), (11.771458849548669, 25.988895069443515), (16.93143609034954, 27.39733684178803), (29.687885106180886, 27.227432129237787), (26.523281513942024, 25.99935890058393), (26.42784837435666, 27.51510840570594), (25.11441192860606, 29.380469995751255), (26.842567148372538, 29.934782921894662), (27.760348335703505, 25.24381070960993), (28.570844251714224, 27.457030380298605), (28.64024681300843, 27.79484917871787), (25.819102188523907, 28.685366257685086), (26.003941381277116, 29.272134680140002), (25.901607938540042, 27.192111257872355), (28.59183018721046, 28.314447651860466), (27.833683039380443, 29.058063046242186), (25.356732025592564, 29.43763054607301), (28.838471447249688, 28.122305204564377), (26.16172506181852, 28.81341062224944), (28.399869583814755, 27.574784265224558), (29.80232936505231, 29.697967529620474), (29.68197291729575, 25.218456225042452), (25.69078709516595, 29.938113346271457), (25.372531368875578, 27.374875773556592), (26.023625071450663, 27.339912691002752), (26.672320159440357, 29.721889023278937), (29.904860219825707, 25.46500585593379), (25.415815876684906, 28.911842182680612), (29.2383160797765, 26.42987752831573), (26.440252930688494, 26.651943228298787), (26.012342168117843, 28.15760434866482), (25.18895677425063, 26.909675470347576), (26.65558232132523, 28.000036025008292), (29.445192640512644, 25.030356768315322), (27.85502538333548, 29.87791734872055), (28.01037283475122, 25.378127935318297), (25.01901787580736, 29.7122826604421), (25.93062736360925, 29.715527064767233), (25.77228947704718, 25.924781162057187), (26.98050329693146, 26.464085948342394), (29.314092322628476, 28.416833051038733), (26.643522863116317, 27.221112105565236), (25.030336924461405, 26.144765850670147), (19.08608910509182, 22.697108707897886), (21.240185390429456, 21.43474688220823), (19.057168725672764, 21.37995639182168), (19.563618289176446, 20.916926633682856), (21.848144469680715, 20.19124115099716), (21.489831874238625, 21.645364966107003), (21.775150267771874, 20.439145881249974), (20.830042107561045, 21.403241412620176), (22.50484967527842, 19.712364720277314), (19.59346830939371, 19.97391959867901), (22.905587918038464, 19.871660638524094), (22.996006775924197, 19.23290470493499), (21.329098956235462, 22.350093464402068), (21.406637495859805, 20.3275249089562), (21.3262941778847, 22.19576263820213), (20.112191302875367, 21.78366216959246), (21.383480908234347, 20.904561236744073), (22.19906497420728, 20.602734582363617), (21.23922912215831, 21.076874638415596), (19.931327713509948, 20.482283309869253), (21.520920170157456, 20.19900199017623), (20.40373923472233, 21.27338783918771), (22.064747222131906, 22.113013080928233), (20.350307262526908, 22.46825551336944), (22.474756956762405, 22.882128475722645), (22.661522046799224, 20.763123370961058), (20.84165729110919, 20.408689708429268), (21.9647435663329, 21.70117122115839), (22.9525335514141, 22.46897563525105), (21.643836441026, 19.11881149789211), (19.83158440486462, 22.61229615227234), (20.73286343257648, 19.426875066573047), (20.1445898712155, 20.79340464936755), (19.96860943460639, 19.017984666630785), (19.0913726659775, 22.068330216166636), (22.038018297340898, 20.41221474958832), (22.343454888215962, 21.559904272864966), (21.633861676974867, 20.37631493609627), (21.721989034958547, 19.606913190502294), (20.043565891387797, 20.02396921820584)]


def plot_dataset():
    # Nothing to change in this function! (Plot the dataset)
    for (x, y) in dataset:
        plt.scatter(x, y, color="blue")
    plt.show()


def plot_groups(groups, centers):
    # Nothing to change in this function! (Plot the point)
    import matplotlib.cm as cm
    import numpy as np
    colors = iter(cm.rainbow(np.linspace(0, 1, len(groups))))
    for group in groups:
        c = next(colors)
        for x, y in group:
            plt.scatter(x, y, color=c)

    for x, y in centers:
        plt.scatter(x, y,color="black", s=200)
    plt.show()


def dist(x1, y1, x2, y2):
    """
    return the distance between 2 points
    :param x1, y1: x and y coordinates of first point
    :param x2, y2: x and y coordinates of second point
    :return: float distance
    """
    return math.sqrt((x2-x1)**2 + (y2-y1)**2)


def calc_new_centers(groups):
    """
    Get the groups and calculate the new centers
    :param groups: list of lists of coordinates
    :return: list of new centers where each center is the average of the coordinates in the group
    """
    new_centers = []
    
    
    for group in groups:
        s_x = 0
        s_y = 0
        if group == []:
            continue
        
        for x, y in group:
            s_x += x
            s_y += y       
        
        new_x = s_x / len(group)
        new_y = s_y / len(group)
        new_centers.append((new_x, new_y))
        
        # TODO add code here
    return new_centers


def run_algo(K):
    """
    Receives a K and returns the best groups clustering for that K
    :return: list of lists of coordinates
    """
	# init groups to be empty
    groups = [[] for _ in range(K)]
    old_groups = groups
	
    # select initial centers locations "randomly"
    centers = [(random.randint(10,20), random.randint(10,20)) for _ in range(K)]
    
    
    # Run algo until stopping condition applies or did 1000000 iterations
    # TODO
    count = 0
    groups = assign_points(K, centers)
    centers = calc_new_centers(groups)
    while (old_groups != groups) and count < 1000000:
        old_groups = groups
        groups = assign_points(K, centers)
        centers = calc_new_centers(groups)
        #print("here")
        count += 1

    return groups, centers

def assign_points(K, centers):
    groups = [[] for _ in range(K)]
    for point in dataset:
            close_center = (centers[0][0],centers[0][1])
            close_ceneter_index = 0
            center_index = 0
            for center in centers:
                if dist(point[0], point[1], center[0], center[1]) < dist(point[0], point[1], close_center[0], close_center[1]):
                    close_center = center
                    close_ceneter_index = center_index
                center_index += 1
            groups[close_ceneter_index].append(point)
    return groups


def calc_E_k(groups, centers):
    """
    Calculate E(K) From the class
    :param groups: list of lists of coordinates
    :param centers: list of coordinates of centers
    :return: E(K)
    """
    total_dist = 0
    # TODO add code her
    for i in range(len(centers)):
        for point in groups[i]:
            total_dist += dist(point[0], point[1], centers[i][0], centers[i][1])
    return math.sqrt((1/len(dataset)) * total_dist)


def check_stop_algo(E_k, old_E_k):
    # NOTHING TO CHANGE HERE!
    """
    :param E_k: E(K)
    :param old_E_k: E(K-1)
    :return: check the condition from the class
    """
    return 1 - (E_k / old_E_k) < EPSILON


def run_KMEANS():
    """
    Find the best K for the K-Means algorithm
    :return: returns a list of groups and a list of centers
    groups = list of groups. Each group includes coordinates of point
    centers = list of coordinates of centers
    """
    old_E_k = -1
    for k in range(1, 7):
        groups, centers = run_algo(k)
        E_k =  calc_E_k(groups, centers)
        # Check finish algo condition as taught it class
        if check_stop_algo(E_k, old_E_k):
            break
        old_E_k = E_k

    print("Best K is: {}\n".format(len(centers)))
    return groups, centers




if __name__ == "__main__":
    #plot_dataset()  # Show dataset (only for your convenience)
    groups, centers = run_KMEANS()  # Run K-Means
    plot_groups(groups, centers)  # Show results